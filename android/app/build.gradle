plugins {
    id "com.android.application"
    id "kotlin-android"
    id "dev.flutter.flutter-gradle-plugin"
}

def localProperties = new Properties()
def localPropertiesFile = rootProject.file('local.properties')
if (localPropertiesFile.exists()) {
    localPropertiesFile.withReader('UTF-8') { reader ->
        localProperties.load(reader)
    }
}

def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
if (flutterVersionCode == null) {
    flutterVersionCode = '1'
}

def flutterVersionName = localProperties.getProperty('flutter.versionName')
if (flutterVersionName == null) {
    flutterVersionName = '1.0'
}

android {
    namespace "com.example.rust_log4rs_demo2"
    compileSdkVersion flutter.compileSdkVersion
    ndkVersion flutter.ndkVersion

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        main {
            jniLibs.srcDirs = ['src/main/jniLibs']
        }
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.example.rust_log4rs_demo2"
        // You can update the following values to match your application needs.
        // For more information, see: https://docs.flutter.dev/deployment/android#reviewing-the-gradle-build-configuration.
        minSdkVersion flutter.minSdkVersion
        targetSdkVersion flutter.targetSdkVersion
        versionCode flutterVersionCode.toInteger()
        versionName flutterVersionName

        // Add Rust library path
        externalNativeBuild {
            cmake {
                arguments "-DANDROID_STL=c++_shared"
            }
        }
    }

    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now, so `flutter run --release` works.
            signingConfig signingConfigs.debug
        }
    }

    // Add task to copy compiled Rust libraries
    tasks.register('copyRustLibs', Copy) {
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
        
        // Create destination directories first
        doFirst {
            file('src/main/jniLibs/armeabi-v7a').mkdirs()
            file('src/main/jniLibs/arm64-v8a').mkdirs()
            file('src/main/jniLibs/x86').mkdirs()
            file('src/main/jniLibs/x86_64').mkdirs()
        }
        
        // Copy each architecture's library to the correct directory
        from('../../rust/target/android/arm64-v8a/release/librust_log4rs_demo2.so') {
            into 'arm64-v8a'
        }
        from('../../rust/target/android/armeabi-v7a/release/librust_log4rs_demo2.so') {
            into 'armeabi-v7a'
        }
        from('../../rust/target/android/x86/release/librust_log4rs_demo2.so') {
            into 'x86'
        }
        from('../../rust/target/android/x86_64/release/librust_log4rs_demo2.so') {
            into 'x86_64'
        }
        
        into 'src/main/jniLibs'
    }
    
    // Run task before build
    tasks.whenTaskAdded { task ->
        if (task.name == 'assembleDebug' || task.name == 'assembleRelease') {
            task.dependsOn 'copyRustLibs'
        }
    }
    
    // Make preBuild depend on copyRustLibs to ensure libraries are ready
    tasks.named('preBuild') {
        dependsOn 'copyRustLibs'
    }
}

flutter {
    source '../..'
}

dependencies {}
